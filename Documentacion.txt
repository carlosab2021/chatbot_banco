Documentación del Sistema: Agente de Atención al Cliente
1. Descripción del Sistema
El Agente de Atención al Cliente es una aplicación basada en Streamlit que utiliza LangChain y GroqAI para responder preguntas de los usuarios. El sistema combina una base de conocimientos (archivos de texto) y un archivo de saldos (saldo.csv) para proporcionar respuestas precisas y contextualizadas.

Características principales:
Interfaz web: Una interfaz fácil de usar construida con Streamlit.

Base de conocimientos: Responde preguntas basadas en archivos de texto almacenados en la carpeta knowledge_base/.

Consulta de saldos: Permite a los usuarios consultar saldos de clientes registrados en saldo.csv.

Modelo de lenguaje: Utiliza GroqAI (con el modelo mixtral-8x7b-32768) para generar respuestas en español.

2. Diseño del Sistema
Arquitectura
El sistema está compuesto por los siguientes módulos:

Frontend (Streamlit):

Interfaz de usuario para interactuar con el agente.

Campo de entrada para preguntas y botón para enviarlas.

Muestra las respuestas generadas por el agente.

Backend (LangChain + GroqAI):

Base de conocimientos: Archivos de texto en la carpeta knowledge_base/.

Embeddings: Usa el modelo sentence-transformers/all-MiniLM-L6-v2 para convertir textos en vectores.

Retriever: Utiliza FAISS para buscar información relevante en la base de conocimientos.

Modelo de lenguaje: GroqAI para generar respuestas en español.

Datos:

saldo.csv: Archivo CSV con los saldos de los clientes.

knowledge_base/: Carpeta con archivos de texto que contienen información relevante.

3. Cómo Funciona el Sistema
Flujo de trabajo
Entrada del usuario:

El usuario ingresa una pregunta en la interfaz de Streamlit.

Procesamiento de la pregunta:

Si la pregunta contiene las palabras "saldo" o "balance", el sistema busca el saldo del cliente en saldo.csv.

Si no, el sistema busca información relevante en la base de conocimientos.

Generación de la respuesta:

El sistema utiliza GroqAI para generar una respuesta basada en la información recuperada.

La respuesta se muestra en la interfaz de Streamlit.

4. Requisitos del Sistema
Dependencias
El proyecto requiere las siguientes dependencias:

Python 3.8 o superior.

Las bibliotecas listadas en requirements.txt:

plaintext
Copy
streamlit
langchain
groq
pydantic
transformers
faiss-cpu
pandas
langchain-community
Instalación
Clonar el repositorio:

bash
Copy
git clone https://github.com/tu_usuario/tu_repositorio.git
cd tu_repositorio
Crear y activar un entorno virtual:

bash
Copy
python -m venv venv
source venv/bin/activate  # En Windows: venv\Scripts\activate
Instalar dependencias:

bash
Copy
pip install -r requirements.txt
5. Ejecución del Sistema
Activar el entorno virtual:

bash
Copy
source venv/bin/activate  # En Windows: venv\Scripts\activate
Ejecutar la aplicación:

bash
Copy
streamlit run app.py
Acceder a la interfaz:

Abre tu navegador y visita http://localhost:8501.

6. Pruebas del Sistema
Pruebas manuales
Prueba de preguntas sobre saldos:

Ingresa una pregunta como: ¿Cuál es el saldo de Juan Pérez?

Verifica que el sistema devuelva el saldo correcto.

Prueba de preguntas sobre la base de conocimientos:

Ingresa una pregunta como: ¿Cómo puedo abrir una cuenta bancaria?

Verifica que el sistema devuelva una respuesta basada en los archivos de la carpeta knowledge_base/.

Prueba de nombres no encontrados:

Ingresa una pregunta como: ¿Cuál es el saldo de Ana López?

Verifica que el sistema responda: No se encontró información del cliente Ana López.

Pruebas automatizadas (opcional)
Si deseas implementar pruebas automatizadas, puedes usar un framework como pytest. Aquí tienes un ejemplo básico:

Instalar pytest:

bash
Copy
pip install pytest
Crear un archivo de pruebas (test_app.py):

python
Copy
from app import agente_atencion_al_cliente

def test_saldo_cliente():
    respuesta = agente_atencion_al_cliente("¿Cuál es el saldo de Juan Pérez?")
    assert "1250.50" in respuesta

def test_pregunta_conocimiento():
    respuesta = agente_atencion_al_cliente("¿Cómo puedo abrir una cuenta bancaria?")
    assert "abrir una cuenta" in respuesta.lower()

def test_cliente_no_encontrado():
    respuesta = agente_atencion_al_cliente("¿Cuál es el saldo de Ana López?")
    assert "no se encontró información" in respuesta.lower()
Ejecutar las pruebas:

bash
Copy
pytest test_app.py
7. Estructura del Proyecto
Copy
proyecto/
│
├── app.py                  # Código principal de la aplicación Streamlit
├── knowledge_base/         # Carpeta con los archivos de la base de conocimientos
│   ├── abrir_cuenta.txt
│   ├── requisitos_cuenta.txt
│   └── ...
├── saldo.csv               # Archivo CSV con los saldos de los clientes
├── requirements.txt        # Archivo con las dependencias del proyecto
├── .gitignore              # Archivo para ignorar archivos no deseados en Git
├── README.md               # Documentación del proyecto
└── test_app.py             # Archivo de pruebas automatizadas (opcional)
8. Consideraciones Adicionales
Base de conocimientos: Asegúrate de que los archivos en knowledge_base/ estén en español y contengan información clara y estructurada.

Archivo de saldos: Si el archivo saldo.csv es muy grande, considera usar una base de datos (como SQLite o PostgreSQL) para almacenar y consultar los datos de manera más eficiente.

Despliegue: Puedes desplegar la aplicación en la nube usando servicios como Streamlit Sharing, Heroku, o Render.

9. Licencia
Este proyecto está bajo la licencia MIT. Siéntete libre de usarlo y modificarlo según tus necesidades.